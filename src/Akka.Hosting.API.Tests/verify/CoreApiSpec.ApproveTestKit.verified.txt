[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Akka.Hosting.TestKit.Tests")]
namespace Akka.Hosting.TestKit.Internals
{
    public class TestKitLoggerFactoryLogger : Akka.Hosting.Logging.LoggerFactoryLogger
    {
        public TestKitLoggerFactoryLogger() { }
        protected override bool Receive(object message) { }
    }
    public class XUnitLogger : Microsoft.Extensions.Logging.ILogger
    {
        public XUnitLogger(string category, Xunit.Abstractions.ITestOutputHelper helper, Microsoft.Extensions.Logging.LogLevel logLevel) { }
        public System.IDisposable BeginScope<TState>(TState state)
            where TState :  notnull { }
        public bool IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) { }
        public void Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception? exception, System.Func<TState, System.Exception?, string> formatter) { }
    }
    public class XUnitLoggerProvider : Microsoft.Extensions.Logging.ILoggerProvider, System.IDisposable
    {
        public XUnitLoggerProvider(Xunit.Abstractions.ITestOutputHelper helper, Microsoft.Extensions.Logging.LogLevel logLevel) { }
        public Microsoft.Extensions.Logging.ILogger CreateLogger(string categoryName) { }
        public void Dispose() { }
    }
}
namespace Akka.Hosting.TestKit
{
    public abstract class TestKit : Akka.TestKit.TestKitBase, Xunit.IAsyncLifetime
    {
        protected TestKit(string? actorSystemName = null, Xunit.Abstractions.ITestOutputHelper? output = null, System.TimeSpan? startupTimeout = default, Microsoft.Extensions.Logging.LogLevel logLevel = 2) { }
        public Akka.Hosting.ActorRegistry ActorRegistry { get; }
        public string ActorSystemName { get; }
        protected virtual Akka.Configuration.Config? Config { get; }
        public Microsoft.Extensions.Hosting.IHost Host { get; }
        public Microsoft.Extensions.Logging.LogLevel LogLevel { get; }
        public Xunit.Abstractions.ITestOutputHelper? Output { get; }
        public System.TimeSpan StartupTimeout { get; }
        protected static Akka.TestKit.Xunit2.XunitAssertions Assertions { get; }
        protected virtual System.Threading.Tasks.Task AfterAllAsync() { }
        protected virtual System.Threading.Tasks.Task BeforeTestStart() { }
        protected abstract void ConfigureAkka(Akka.Hosting.AkkaConfigurationBuilder builder, System.IServiceProvider provider);
        protected virtual void ConfigureAppConfiguration(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.Configuration.IConfigurationBuilder builder) { }
        protected virtual void ConfigureHostConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder builder) { }
        protected virtual void ConfigureLogging(Microsoft.Extensions.Logging.ILoggingBuilder builder) { }
        protected virtual void ConfigureServices(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public System.Threading.Tasks.Task DisposeAsync() { }
        [Akka.Annotations.InternalApi]
        public System.Threading.Tasks.Task InitializeAsync() { }
        protected override sealed void InitializeTest(Akka.Actor.ActorSystem system, Akka.Actor.Setup.ActorSystemSetup config, string actorSystemName, string testActorName) { }
    }
}