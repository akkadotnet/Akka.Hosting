[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Akka.Hosting.Tests")]
namespace Akka.Hosting
{
    public class ActorRegistry : Akka.Actor.IExtension, Akka.Hosting.IActorRegistry, Akka.Hosting.IReadOnlyActorRegistry, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, Akka.Actor.IActorRef>>, System.Collections.IEnumerable
    {
        public ActorRegistry() { }
        public Akka.Actor.IActorRef Get<TKey>() { }
        public System.Threading.Tasks.Task<Akka.Actor.IActorRef> GetAsync(System.Type key, System.Threading.CancellationToken ct = default) { }
        public System.Threading.Tasks.Task<Akka.Actor.IActorRef> GetAsync<TKey>(System.Threading.CancellationToken ct = default) { }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Type, Akka.Actor.IActorRef>> GetEnumerator() { }
        public void Register<TKey>(Akka.Actor.IActorRef actor, bool overwrite = false) { }
        public bool TryGet(System.Type key, out Akka.Actor.IActorRef actor) { }
        public bool TryGet<TKey>(out Akka.Actor.IActorRef actor) { }
        public bool TryRegister(System.Type key, Akka.Actor.IActorRef actor, bool overwrite = false) { }
        public bool TryRegister<TKey>(Akka.Actor.IActorRef actor, bool overwrite = false) { }
        public static Akka.Hosting.ActorRegistry For(Akka.Actor.ActorSystem actorSystem) { }
    }
    public class ActorRegistryException : System.Exception
    {
        public ActorRegistryException(string message) { }
        public ActorRegistryException(string message, System.Exception innerException) { }
    }
    public sealed class ActorRegistryExtension : Akka.Actor.ExtensionIdProvider<Akka.Hosting.ActorRegistry>
    {
        public ActorRegistryExtension() { }
        public override Akka.Hosting.ActorRegistry CreateExtension(Akka.Actor.ExtendedActorSystem system) { }
    }
    public delegate System.Threading.Tasks.Task ActorStarter(Akka.Actor.ActorSystem system, Akka.Hosting.IActorRegistry registry);
    public delegate System.Threading.Tasks.Task ActorStarterWithResolver(Akka.Actor.ActorSystem system, Akka.Hosting.IActorRegistry registry, Akka.DependencyInjection.IDependencyResolver resolver);
    public sealed class AkkaConfigurationBuilder
    {
        [Akka.Annotations.InternalApi]
        public readonly System.Collections.Generic.HashSet<Akka.Actor.Setup.Setup> Setups;
        public AkkaConfigurationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, string actorSystemName) { }
        public Akka.Util.Option<Akka.Actor.ProviderSelection> ActorRefProvider { get; }
        public Akka.Util.Option<Akka.Configuration.Config> Configuration { get; }
        public Akka.Hosting.AkkaConfigurationBuilder AddStartup(Akka.Hosting.StartupTask startupTask) { }
        public Akka.Hosting.AkkaConfigurationBuilder AddStartup(System.Action<Akka.Actor.ActorSystem, Akka.Hosting.IActorRegistry> startupTask) { }
        public Akka.Hosting.AkkaConfigurationBuilder StartActors(Akka.Hosting.ActorStarter starter) { }
        public Akka.Hosting.AkkaConfigurationBuilder StartActors(Akka.Hosting.ActorStarterWithResolver starter) { }
        public Akka.Hosting.AkkaConfigurationBuilder StartActors(System.Action<Akka.Actor.ActorSystem, Akka.Hosting.IActorRegistry> starter) { }
        public Akka.Hosting.AkkaConfigurationBuilder StartActors(System.Action<Akka.Actor.ActorSystem, Akka.Hosting.IActorRegistry, Akka.DependencyInjection.IDependencyResolver> starter) { }
        public Akka.Hosting.AkkaConfigurationBuilder WithCustomSerializer(string serializerIdentifier, System.Collections.Generic.IEnumerable<System.Type> boundTypes, System.Func<Akka.Actor.ExtendedActorSystem, Akka.Serialization.Serializer> serializerFactory) { }
        public Akka.Hosting.AkkaConfigurationBuilder WithExtension<T>()
            where T : Akka.Actor.IExtensionId { }
        public Akka.Hosting.AkkaConfigurationBuilder WithExtensions(params System.Type[] extensions) { }
    }
    public static class AkkaHostingExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAkka(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string actorSystemName, System.Action<Akka.Hosting.AkkaConfigurationBuilder> builder) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAkka(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string actorSystemName, System.Action<Akka.Hosting.AkkaConfigurationBuilder, System.IServiceProvider> builder) { }
        public static Akka.Hosting.AkkaConfigurationBuilder AddHocon(this Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Configuration.Config hocon, Akka.Hosting.HoconAddMode addMode) { }
        public static Akka.Hosting.AkkaConfigurationBuilder AddHocon(this Akka.Hosting.AkkaConfigurationBuilder builder, Microsoft.Extensions.Configuration.IConfiguration configuration, Akka.Hosting.HoconAddMode addMode) { }
        public static Akka.Hosting.AkkaConfigurationBuilder AddHoconFile(this Akka.Hosting.AkkaConfigurationBuilder builder, string hoconFilePath, Akka.Hosting.HoconAddMode addMode) { }
        public static Akka.Hosting.AkkaConfigurationBuilder AddSetup(this Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Actor.Setup.Setup setup) { }
        public static Akka.Hosting.AkkaConfigurationBuilder WithActorAskTimeout(this Akka.Hosting.AkkaConfigurationBuilder builder, System.TimeSpan timeout) { }
        public static Akka.Hosting.AkkaConfigurationBuilder WithActorRefProvider(this Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Actor.ProviderSelection providerSelection) { }
        public static Akka.Hosting.AkkaConfigurationBuilder WithActors(this Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Hosting.ActorStarter actorStarter) { }
        public static Akka.Hosting.AkkaConfigurationBuilder WithActors(this Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Hosting.ActorStarterWithResolver actorStarter) { }
        public static Akka.Hosting.AkkaConfigurationBuilder WithActors(this Akka.Hosting.AkkaConfigurationBuilder builder, System.Action<Akka.Actor.ActorSystem, Akka.Hosting.IActorRegistry> actorStarter) { }
        public static Akka.Hosting.AkkaConfigurationBuilder WithActors(this Akka.Hosting.AkkaConfigurationBuilder builder, System.Action<Akka.Actor.ActorSystem, Akka.Hosting.IActorRegistry, Akka.DependencyInjection.IDependencyResolver> actorStarter) { }
    }
    public class DeadLetterOptions
    {
        public DeadLetterOptions() { }
        public int LogCount { get; set; }
        public bool? LogDuringShutdown { get; set; }
        public System.TimeSpan? LogSuspendDuration { get; set; }
        public Akka.Hosting.TriStateValue ShouldLog { get; set; }
        public override string ToString() { }
    }
    public class DebugOptions
    {
        public DebugOptions() { }
        public bool? AutoReceive { get; set; }
        public bool? EventStream { get; set; }
        public bool? FiniteStateMachine { get; set; }
        public bool? LifeCycle { get; set; }
        public bool? Receive { get; set; }
        public bool? RouterMisconfiguration { get; set; }
        public bool? Unhandled { get; set; }
        public override string ToString() { }
    }
    public sealed class DuplicateActorRegistryException : Akka.Hosting.ActorRegistryException
    {
        public DuplicateActorRegistryException(string message) { }
        public DuplicateActorRegistryException(string message, System.Exception innerException) { }
    }
    public enum HoconAddMode
    {
        Append = 0,
        Prepend = 1,
        Replace = 2,
    }
    public delegate Akka.Configuration.Config HoconConfigurator(Akka.Configuration.Config currentConfig, Akka.Configuration.Config configToAdd);
    public static class HoconExtensions
    {
        public static string ToHocon(this bool value) { }
        public static string ToHocon(this bool? value) { }
        public static string ToHocon(this string? text) { }
        public static string ToHocon(this System.TimeSpan value, bool allowInfinite = false, bool zeroIsInfinite = false) { }
        public static string ToHocon(this System.TimeSpan? value, bool allowInfinite = false, bool zeroIsInfinite = false) { }
    }
    public interface IActorRegistry : Akka.Hosting.IReadOnlyActorRegistry, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, Akka.Actor.IActorRef>>, System.Collections.IEnumerable
    {
        void Register<TKey>(Akka.Actor.IActorRef actor, bool overwrite = false);
        bool TryRegister(System.Type key, Akka.Actor.IActorRef actor, bool overwrite = false);
        bool TryRegister<TKey>(Akka.Actor.IActorRef actor, bool overwrite = false);
    }
    public interface IHoconOption
    {
        System.Type Class { get; }
        string ConfigPath { get; }
        void Apply(Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Actor.Setup.Setup? setup = null);
    }
    public interface IReadOnlyActorRegistry : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, Akka.Actor.IActorRef>>, System.Collections.IEnumerable
    {
        Akka.Actor.IActorRef Get<TKey>();
        System.Threading.Tasks.Task<Akka.Actor.IActorRef> GetAsync(System.Type key, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task<Akka.Actor.IActorRef> GetAsync<TKey>(System.Threading.CancellationToken ct = default);
        bool TryGet(System.Type key, out Akka.Actor.IActorRef actor);
        bool TryGet<TKey>(out Akka.Actor.IActorRef actor);
    }
    public interface IRequiredActor<TActor>
    {
        Akka.Actor.IActorRef ActorRef { get; }
    }
    public sealed class LoggerConfigBuilder
    {
        public Akka.Hosting.DeadLetterOptions? DeadLetterOptions { get; set; }
        public Akka.Hosting.DebugOptions? DebugOptions { get; set; }
        public bool LogConfigOnStart { get; set; }
        public Akka.Event.LogLevel LogLevel { get; set; }
        public Akka.Hosting.LoggerConfigBuilder AddLogger<T>()
            where T : Akka.Dispatch.IRequiresMessageQueue<Akka.Event.ILoggerMessageQueueSemantics> { }
        public Akka.Hosting.LoggerConfigBuilder ClearLoggers() { }
    }
    public static class LoggingExtensions
    {
        public static Akka.Hosting.LoggerConfigBuilder AddDefaultLogger(this Akka.Hosting.LoggerConfigBuilder configBuilder) { }
        public static Akka.Hosting.LoggerConfigBuilder AddLoggerFactory(this Akka.Hosting.LoggerConfigBuilder configBuilder) { }
        public static Akka.Hosting.LoggerConfigBuilder AddLoggerFactory(this Akka.Hosting.LoggerConfigBuilder configBuilder, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }
        public static Akka.Hosting.AkkaConfigurationBuilder ConfigureLoggers(this Akka.Hosting.AkkaConfigurationBuilder builder, System.Action<Akka.Hosting.LoggerConfigBuilder> configurator) { }
    }
    public sealed class MissingActorRegistryEntryException : Akka.Hosting.ActorRegistryException
    {
        public MissingActorRegistryEntryException(string message) { }
        public MissingActorRegistryEntryException(string message, System.Exception innerException) { }
    }
    public sealed class RequiredActor<TActor> : Akka.Hosting.IRequiredActor<TActor>
    {
        public RequiredActor(Akka.Hosting.IReadOnlyActorRegistry registry) { }
        public Akka.Actor.IActorRef ActorRef { get; }
    }
    public delegate System.Threading.Tasks.Task StartupTask(Akka.Actor.ActorSystem system, Akka.Hosting.IActorRegistry registry);
    public enum TriStateValue
    {
        None = 0,
        All = 1,
        Some = 2,
    }
    public static class Util
    {
        public static Akka.Configuration.Config MoveTo(this Akka.Configuration.Config config, string path) { }
    }
}
namespace Akka.Hosting.Configuration
{
    public static class ConfigurationHoconAdapter
    {
        public static Akka.Configuration.Config ToHocon(this Microsoft.Extensions.Configuration.IConfiguration config) { }
    }
}
namespace Akka.Hosting.Coordination
{
    public abstract class LeaseOptionBase : Akka.Hosting.IHoconOption
    {
        protected LeaseOptionBase() { }
        public abstract System.Type Class { get; }
        public abstract string ConfigPath { get; }
        public abstract void Apply(Akka.Hosting.AkkaConfigurationBuilder builder, Akka.Actor.Setup.Setup? setup = null);
    }
}
namespace Akka.Hosting.Logging
{
    public class LoggerFactoryLogger : Akka.Actor.ActorBase, Akka.Dispatch.IRequiresMessageQueue<Akka.Event.ILoggerMessageQueueSemantics>
    {
        public const string DefaultTimeStampFormat = "yy/MM/dd-HH:mm:ss.ffff";
        protected readonly Akka.Event.ILoggingAdapter InternalLogger;
        public LoggerFactoryLogger() { }
        protected virtual void Log(Akka.Event.LogEvent log, Akka.Actor.ActorPath path) { }
        protected override void PostStop() { }
        protected override bool Receive(object message) { }
    }
    public class LoggerFactorySetup : Akka.Actor.Setup.Setup
    {
        public LoggerFactorySetup(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }
        public Microsoft.Extensions.Logging.ILoggerFactory LoggerFactory { get; }
    }
}